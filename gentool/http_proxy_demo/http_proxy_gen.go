package main

import (
	"flag"
	"fmt"
	"github.com/cheny2151/go-toolbox/gentool/visitor"
	"strings"
)

const temp = `
// Code generated by http_proxy_gen. DO NOT EDIT.

package {{.Pkg}}

import (
	{{range $val := .DependImports}}{{$val.Alias}} "{{$val.Pkg}}"
	{{end}}
)

// http proxy impl

{{range $tag := .Targets}}

{{range $method := $tag.TargetMethods }}
{{if eq $method.Name "Call"}}

{{ $resp0 := (index $method.Results 0) }}

type {{$tag.Name}}HttpProxy struct {
	HttpProxy[{{$resp0.TypeName}}]
}

func (receiver {{$tag.Name}}HttpProxy) {{$method.Name}}({{range $i, $param := $method.Params}}{{if gt $i 0}},{{end}}{{$param.Name}} {{if $param.IsPointer}}*{{end}}{{$param.TypeName}}{{end}}) ({{range $i, $param := $method.Results}}{{if gt $i 0}},{{end}}{{$param.Name}} {{if $param.IsPointer}}*{{end}}{{$param.TypeName}}{{end}}) {
	result, err := receiver.HttpProxy.Call(ctx, strategy, request)
	{{ if $resp0.IsPointer }}return result, err{{ else }}return *result, err{{ end }}
}
{{end}}
{{end}}
{{end}}
`

func main() {
	var inputFile string
	var outputFile string
	flag.StringVar(&inputFile, "inputFile", "", "input file")
	flag.StringVar(&outputFile, "outputFile", "", "output file")
	flag.Parse()

	fmt.Println(inputFile, outputFile)
	if inputFile == "" || outputFile == "" {
		panic("input or output file can not be empty")
	}
	visitor.GenWithTemplate(inputFile, outputFile, temp,
		func(signature *visitor.StructInfo) bool {
			return strings.ContainsAny(signature.Doc, "@httpProxy")
		},
		func(signature *visitor.MethodSignature) bool {
			return signature.Name == "Call"
		})
}
